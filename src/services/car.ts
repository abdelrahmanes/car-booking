import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { carType } from "../types";
const baseUrl = "http://localhost:3004/";
// Define the API slice using createApi
export const carApiSlice = createApi({
  reducerPath: "api",
  baseQuery: fetchBaseQuery({ baseUrl: baseUrl }),
  endpoints: (builder) => ({
    getItems: builder.query({
      query: (options) => {
        const { State, Brand } = options;
        let url = "/specs";
        if (!Brand || !State) {
          url = "/specs";
        } else if (State !== "State" && Brand !== "Brand") {
          url += `?state=${State}&brand=${Brand}`;
        } else if (State && Brand === "Brand" && State !== "State") {
          url += `?state=${State}`;
        } else if (Brand && State === "State" && Brand !== "Brand") {
          url += `?brand=${Brand}`;
        }
        return url;
      },
    }),
    getSearchResults: builder.query({
      query: (query) => `/specs?q=${query}`,
    }),
    // this for change the favourited state
    updateCar: builder.mutation<carType, Partial<carType>>({
      query: ({ id, ...partialCar }) => ({
        url: `specs/${id}`,
        method: "POST",
        body: partialCar,
        headers: {
          "Content-Type": "application/json",
        },
      }),
    }),
  }),
});

// Export the endpoint and hooks generated by createApi
export const {
  useGetItemsQuery,
  useUpdateCarMutation,
  useGetSearchResultsQuery,
} = carApiSlice;
